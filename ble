var bleno = require('bleno');

var SensorService = require('./sensor-service');

var sensorService = new SensorService();

bleno.on('stateChange', function(state) {
  console.log('on -> stateChange: ' + state);

  if (state === 'poweredOn') {
    bleno.startAdvertising('My service', [sensorService.uuid]);
  } else {
    bleno.stopAdvertising();
  }
});

bleno.on('advertisingStart', function(error) {
  console.log('on -> advertisingStart: ' + (error ? 'error ' + error : 'success'));

  if (!error) {
    bleno.setServices([
       sensorService
    ]);
  }
});

bleno.on('servicesSet', function() {
  console.log('on -> servicesSet');
});
bleno.on('accept', function() {
  console.log('on -> accept');
});

service.js :
-----------

var util = require('util');

var bleno = require('bleno');
var BlenoPrimaryService = bleno.PrimaryService;

var SensorACharacteristic = require('./sensor-a-characteristic');
var SensorBCharacteristic = require('./sensor-b-characteristic');
var SensorCCharacteristic = require('./sensor-c-characteristic');
var SensorDCharacteristic = require('./sensor-d-characteristic');
var SensorECharacteristic = require('./sensor-e-characteristic');

function SensorService() {
  SensorService.super_.call(this, {
    uuid: '00000000000000000000000000101010',
    characteristics: [
      new SensorACharacteristic(),
      new SensorBCharacteristic(),
      new SensorCCharacteristic(),
      new SensorDCharacteristic(),
      //new SensorECharacteristic(),
    ]
  });
}

util.inherits(SensorService, BlenoPrimaryService);

module.exports = SensorService;
sensorXCharacteristic.js :

var util = require('util');

var bleno = require('bleno');
var BlenoCharacteristic = bleno.Characteristic;
var BlenoDescriptor = bleno.Descriptor;

function SensorACharacteristic() {
  SensorACharacteristic.super_.call(this, {
    uuid: '00000000000000000000000000101011',
    properties: ['notify', 'write'],
    descriptors: [
      new BlenoDescriptor({
        uuid: '2901',
        value: 'notify sensor A state changed'
      })
    ]
  });
}

util.inherits(SensorACharacteristic, BlenoCharacteristic);

SensorACharacteristic.prototype.onWriteRequest = function(data, offset, withoutResponse, callback) {
  console.log('SensorACharacteristic onWriteRequest');
  if (offset) {
    callback(this.RESULT_ATTR_NOT_LONG);
  } else if (data.length !== 1) {
    callback(this.RESULT_INVALID_ATTRIBUTE_LENGTH);
  } else {
    if (this.updateValueCallback) {
      this.updateValueCallback(data);
    } else {
      console.log('no updateValueCallback');
    }

    callback(this.RESULT_SUCCESS);
  }
};

SensorACharacteristic.prototype.onSubscribe = function(maxValueSize, updateValueCallback) {
  console.log('SensorACharacteristic subscribe');
  this.updateValueCallback = updateValueCallback;
};

SensorACharacteristic.prototype.onUnsubscribe = function() {
  console.log('SensorACharacteristic unsubscribe');
};

SensorACharacteristic.prototype.onNotify = function() {
  console.log('SensorACharacteristic on notify');
};

module.exports = SensorACharacteristic;

